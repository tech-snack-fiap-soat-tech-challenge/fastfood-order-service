name: Build and Deploy to EKS with Helm

on:
  push:
    branches: [ feat/deploy ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: fiap-fastfood
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME}}
  HELM_RELEASE_NAME: fastfood-order-service

jobs:
  build-and-deploy:
    name: Build and Deploy with Helm
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'

    - name: Configurar credenciais AWS no Kubernetes
      run: |
        # Criar secret para as credenciais AWS
        kubectl create secret generic aws-credentials \
          --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --from-literal=AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
          --namespace default \
          --dry-run=client -o yaml | kubectl apply -f -
          
        echo "Secret aws-credentials criado/atualizado com sucesso"

    - name: Configurar secrets para AWS SQS
      run: |
        kubectl create secret generic aws-sqs-config \
          --from-literal=AWS_ORDER_CREATED_QUEUE_URL=${{ secrets.AWS_ORDER_CREATED_QUEUE_URL }} \
          --from-literal=AWS_PAYMENT_COMPLETED_QUEUE_URL=${{ secrets.AWS_PAYMENT_COMPLETED_QUEUE_URL }} \
          --namespace default \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to EKS with Helm (sem wait)
      run: |
        helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./helm \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=${{ github.sha }} \
          --namespace default \
          --create-namespace