name: Esteira de CI | CD para Construir, Testar e Implantar Aplica√ß√£o no AWS EKS com o Helm

on:
  push:
    branches: 
    - feat/deploy
    - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: fiap-fastfood
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME}}
  HELM_RELEASE_NAME: fastfood-order-service

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo-fonte
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm install

      - name: Executar testes e gerar cobertura
        run: npm run test:cov

      - name: Enviar cobertura ao SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          SCANNER_META_PATH="$(pwd)/.scanner-meta.properties"
          npx sonar-scanner \
            -Dsonar.projectKey=tech-snack-fiap-soat-tech-challenge_fastfood-order-service \
            -Dsonar.organization=tech-snack-fiap-soat-tech-challenge \
            -Dsonar.sources=src \
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.scanner.metadataFilePath=$SCANNER_META_PATH \
            -Dsonar.coverage.exclusions=**/main.ts,**/configuration.ts,**/*.module.ts,**/*.entity.ts,**/*.enum.ts,**/scripts/**,**/common/exceptions/**,**/common/filters/**,**/common/providers/** \
            -Dsonar.exclusions=.github/workflows/**

      - name: Validar Quality Gate do SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Aguardando an√°lise do SonarCloud finalizar..."
          PROJECT_KEY="tech-snack-fiap-soat-tech-challenge_fastfood-order-service"
          META_PATH="$(pwd)/.scanner-meta.properties"
          TASK_ID=$(grep ceTaskId "$META_PATH" | cut -d'=' -f2)
          if [ -z "$TASK_ID" ]; then
            echo "‚ùå N√£o foi poss√≠vel encontrar ceTaskId. A an√°lise pode ter falhado."
            exit 1
          fi
          STATUS="PENDING"
          while [ "$STATUS" != "SUCCESS" ] && [ "$STATUS" != "FAILED" ]; do
            sleep 5
            STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
          done
          if [ "$STATUS" != "SUCCESS" ]; then
            echo "‚ùå An√°lise falhou"
            exit 1
          fi

          ANALYSIS_ID=""
          while [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" == "null" ]; do
            echo "‚è≥ Aguardando analysisId da task..."
            sleep 3
            ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')
          done

          echo "üîç Validando Quality Gate para an√°lise $ANALYSIS_ID..."

          QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
            | jq -r '.projectStatus.status')

          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo -e "\n‚ùå Quality Gate falhou! Detalhes:"
            curl -s -u $SONAR_TOKEN: \
              "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
              | jq -r '.projectStatus.conditions[] | select(.status != "OK") | "- Crit√©rio: \(.metric)\n  Valor atual: \(.actual // \"n/a\")\n  Status: \(.status)\n"'
            echo -e "\nüîó Ver detalhes: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"
            exit 1
          else
            echo -e "\n‚úÖ Quality Gate aprovado."
          fi

      - name: Compilar TypeScript
        run: npm run build
        
  build-and-deploy:
    name: Construir e Implantar no AWS EKS com o Helm
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Autentica√ß√£o no AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Construir, adicionar tag e enviar imagem para o AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Atualizar Configura√ß√µes do kubeconfig
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
    
    - name: Configurar o Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'

    - name: Configurar credenciais AWS no Kubernetes
      run: |
        # Criar secret para as credenciais AWS
        kubectl create secret generic aws-credentials \
          --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --from-literal=AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
          --namespace default \
          --dry-run=client -o yaml | kubectl apply -f -
          
        echo "Secret aws-credentials criado/atualizado com sucesso"

    - name: Configurar secrets para AWS SQS
      run: |
        kubectl create secret generic aws-sqs-config \
          --from-literal=AWS_ORDER_CREATED_QUEUE_URL=${{ secrets.AWS_ORDER_CREATED_QUEUE_URL }} \
          --from-literal=AWS_PAYMENT_COMPLETED_QUEUE_URL=${{ secrets.AWS_PAYMENT_COMPLETED_QUEUE_URL }} \
          --namespace default \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Implantar no AWS EKS (sem wait)
      run: |
        helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./helm \
          --set image.repository=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }} \
          --set image.tag=${{ github.sha }} \
          --namespace default \
          --create-namespace